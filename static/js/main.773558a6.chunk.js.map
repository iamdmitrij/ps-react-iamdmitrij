{"version":3,"sources":["components/Label/Label.js","utils/percentUtils.js","components/ProgressBar/ProgressBar.js","components/TextInput/TextInput.js","components/PasswordInput/PasswordInput.js","components/EyeIcon/EyeIcon.js","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleErrorCSSModules.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleErrorBEM.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["Label","htmlFor","label","required","style","display","color","getWidthAsPercentOfTotalWidth","percent","totalWidth","parseInt","ProgressBar","getColor","props","width","this","height","border","backgroundColor","React","Component","defaultProps","TextInput","htmlId","name","type","onChange","placeholder","value","error","children","marginBottom","id","className","PasswordInput","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","EyeIcon","length","xmlns","viewBox","transform","fill","d","cx","cy","r","module","exports","EyeIconExample","ExampleOptional","ExampleRequired","ExampleAllFeatures","password","target","minLength","getQuality","Example100Percent","Example10Percent","Example70Percent","RegistrationForm","user","onSubmit","validate","submitted","email","errors","minPasswordLength","Object","getOwnPropertyNames","confirmationMessage","passwordQuality","ExampleRegistrationForm","console","log","TextInputCSSModules","styles","fieldset","inputError","ExampleErrorCSSModules","TextInputBEM","ExampleErrorBEM","TextInputStyledComponents","Error","styled","div","Input","input","Fieldset","ExampleError","HelloWorld","message","ExampleHelloWorld","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","showCode","example","description","ExampleComponent","require","componentName","default","Props","defaultValue","ComponentPage","component","examples","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.773558a6.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Label = ({ htmlFor, label, required }) => {\n  return (\n    <label style={{ display: \"block\" }} htmlFor={htmlFor}>\n      {label} {required && <span style={{ color: \"red\" }}>*</span>}\n    </label>\n  );\n};\n\nLabel.propTypes = {\n  htmlFor: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  required: PropTypes.bool\n};\n\nexport default Label;\n","export function getWidthAsPercentOfTotalWidth(percent, totalWidth) {\n  return parseInt(totalWidth * (percent / 100), 10);\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getWidthAsPercentOfTotalWidth } from \"../../utils/percentUtils\";\n\nclass ProgressBar extends React.Component {\n  getColor = (percent) => {\n    if (this.props.percent === 100) return \"green\";\n    return this.props.percent > 50 ? \"lightgreen\" : \"red\";\n  };\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  };\n\n  render() {\n    const { percent, width, height } = this.props;\n    return (\n      <div style={{ border: \"solid 1px lightgray\", width: width }}>\n        <div\n          style={{\n            width: getWidthAsPercentOfTotalWidth(\n              this.props.percent,\n              this.props.width\n            ),\n            height,\n            backgroundColor: this.getColor(percent),\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  percent: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number,\n};\n\nProgressBar.defaultProps = {\n  height: 5,\n};\nexport default ProgressBar;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\n\nconst TextInput = ({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) => (\n  <div style={{ marginBottom: 16 }}>\n    <Label htmlFor={htmlId} label={label} required={required} />\n    <input\n      id={htmlId}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      style={error && { border: \"solid 1px red\" }}\n      {...props}\n    />\n    {children}\n    {error && (\n      <div className=\"error\" style={{ color: \"red\" }}>\n        {error}\n      </div>\n    )}\n  </div>\n);\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ProgressBar from \"../ProgressBar\";\nimport EyeIcon from \"../EyeIcon\";\nimport TextInput from \"../TextInput\";\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false,\n    };\n  }\n\n  toggleShowPassword = (event) => {\n    this.setState((prevState) => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  };\n\n  render() {\n    const {\n      htmlId,\n      value,\n      label,\n      error,\n      onChange,\n      placeholder,\n      maxLength,\n      showVisibilityToggle,\n      quality,\n      ...props\n    } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? \"text\" : \"password\"}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}\n      >\n        {showVisibilityToggle && (\n          <a\n            href=\"\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}\n          >\n            <EyeIcon />\n          </a>\n        )}\n        {value.length > 0 && quality && (\n          <ProgressBar percent={quality} width={130} />\n        )}\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string,\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: \"Password\",\n};\n\nexport default PasswordInput;\n","import React from \"react\";\n\n/** SVG Eye Icon */\nconst EyeIcon = () => (\n  <svg\n    width=\"16\"\n    height=\"16\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 22 22\"\n  >\n    <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n      <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n      <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n    </g>\n  </svg>\n);\n\nexport default EyeIcon;\n","module.exports = [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from \\\"react\\\";\\n\\n/** SVG Eye Icon */\\nconst EyeIcon = () => (\\n  <svg\\n    width=\\\"16\\\"\\n    height=\\\"16\\\"\\n    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n    viewBox=\\\"0 0 22 22\\\"\\n  >\\n    <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n      <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n      <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n    </g>\\n  </svg>\\n);\\n\\nexport default EyeIcon;\\n\",\"examples\":[{\"name\":\"Example\",\"description\":\"\",\"code\":\"import React from \\\"react\\\";\\nimport EyeIcon from \\\"ps-react/EyeIcon\\\";\\n\\nexport default function EyeIconExample() {\\n  return <EyeIcon />;\\n}\\n\"}]},{\"name\":\"HelloWorld\",\"description\":\"A super lame component.\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"\\\"World\\\"\",\"computed\":false}}},\"code\":\"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\n/** A super lame component. */\\nfunction HelloWorld({ message }) {\\n  return <div>Hello {message}</div>;\\n}\\n\\nHelloWorld.propTypes = {\\n  /** Message to display */\\n  message: PropTypes.string\\n};\\n\\nHelloWorld.defaultProps = {\\n  message: \\\"World\\\"\\n};\\n\\nexport default HelloWorld;\\n\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"Custom message\",\"code\":\"import React from \\\"react\\\";\\nimport HelloWorld from \\\"ps-react/HelloWorld\\\";\\n\\n/** Custom message */\\nexport default function ExampleHelloWorld() {\\n  return <HelloWorld message=\\\"Hello\\\" />;\\n}\\n\"}]},{\"name\":\"Label\",\"description\":\"\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"\"}},\"code\":\"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\nconst Label = ({ htmlFor, label, required }) => {\\n  return (\\n    <label style={{ display: \\\"block\\\" }} htmlFor={htmlFor}>\\n      {label} {required && <span style={{ color: \\\"red\\\" }}>*</span>}\\n    </label>\\n  );\\n};\\n\\nLabel.propTypes = {\\n  htmlFor: PropTypes.string.isRequired,\\n  label: PropTypes.string.isRequired,\\n  required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional label\",\"code\":\"import React from \\\"react\\\";\\nimport Label from \\\"../../../components/Label\\\";\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />;\\n}\\n\"},{\"name\":\"ExampleRequired\",\"description\":\"Required label\",\"code\":\"import React from \\\"react\\\";\\nimport Label from \\\"../../../components/Label\\\";\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />;\\n}\\n\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password input with integrated label, quality tips, and show password toggle.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"\\\"Password\\\"\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder displayed when no password is entered\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to true to show the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport ProgressBar from \\\"../ProgressBar\\\";\\nimport EyeIcon from \\\"../EyeIcon\\\";\\nimport TextInput from \\\"../TextInput\\\";\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showPassword: false\\n    };\\n  }\\n\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n    if (event) event.preventDefault();\\n  };\\n\\n  render() {\\n    const {\\n      htmlId,\\n      value,\\n      label,\\n      error,\\n      onChange,\\n      placeholder,\\n      maxLength,\\n      showVisibilityToggle,\\n      quality,\\n      ...props\\n    } = this.props;\\n    const { showPassword } = this.state;\\n\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? \\\"text\\\" : \\\"password\\\"}\\n        onChange={onChange}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...props}\\n      >\\n        {showVisibilityToggle && (\\n          <a\\n            href=\\\"\\\"\\n            onClick={this.toggleShowPassword}\\n            style={{ marginLeft: 5 }}\\n          >\\n            <EyeIcon />\\n          </a>\\n        )}\\n        {value.length > 0 && quality && (\\n          <ProgressBar percent={quality} width={130} />\\n        )}\\n      </TextInput>\\n    );\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: \\\"Password\\\"\\n};\\n\\nexport default PasswordInput;\\n\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"\",\"code\":\"import React, { Component } from \\\"react\\\";\\nimport PasswordInput from \\\"ps-react/PasswordInput\\\";\\n\\nclass ExampleAllFeatures extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      password: \\\"\\\"\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={event => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\\n\"}]},{\"name\":\"ProgressBar\",\"description\":\"\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\nclass ProgressBar extends React.Component {\\n  getColor = percent => {\\n    if (this.props.percent === 100) return \\\"green\\\";\\n    return this.props.percent > 50 ? \\\"lightgreen\\\" : \\\"red\\\";\\n  };\\n\\n  getWidthAsPercentOfTotalWidth = () => {\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\n  };\\n\\n  render() {\\n    const { percent, width, height } = this.props;\\n    return (\\n      <div style={{ border: \\\"solid 1px lightgray\\\", width: width }}>\\n        <div\\n          style={{\\n            width: this.getWidthAsPercentOfTotalWidth(),\\n            height,\\n            backgroundColor: this.getColor(percent)\\n          }}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nProgressBar.propTypes = {\\n  percent: PropTypes.number.isRequired,\\n  width: PropTypes.number.isRequired,\\n  height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n};\\nexport default ProgressBar;\\n\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"100% progress\",\"code\":\"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/** 100% progress */\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={150} height={20} />;\\n}\\n\"},{\"name\":\"Example10Percent\",\"description\":\"10% progress\",\"code\":\"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/** 10% progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={150} />;\\n}\\n\"},{\"name\":\"Example70Percent\",\"description\":\"70% progress\",\"code\":\"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/** 70% progress */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={150} />;\\n}\\n\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation.\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"\\\"Thanks for registering!\\\"\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport TextInput from '../TextInput';\\nimport PasswordInput from '../PasswordInput';\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: '',\\n        password: ''\\n      },\\n      errors: {},\\n      submitted: false,\\n    };\\n  }\\n\\n  onChange = (event) => {\\n    const user = this.state.user;\\n    user[event.target.name] = event.target.value;\\n    this.setState({user});\\n  }\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    if (password.length >= this.props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\\n    return percentOfMinLength;\\n  }\\n\\n  validate({email, password}) {\\n    const errors = {};\\n    const {minPasswordLength} = this.props;\\n\\n    if (!email) errors.email = 'Email required.';\\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({errors});\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const {user} = this.state;\\n    const formIsValid = this.validate(user);\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({submitted: true});\\n    }\\n  }\\n\\n  render() {\\n    const {errors, submitted} = this.state;\\n    const {email, password} = this.state.user;\\n\\n    return (\\n      submitted ?\\n      <h2>{this.props.confirmationMessage}</h2> :\\n      <div>\\n        <TextInput\\n          htmlId=\\\"registration-form-email\\\"\\n          name=\\\"email\\\"\\n          onChange={this.onChange}\\n          label=\\\"Email\\\"\\n          value={email}\\n          error={errors.email}\\n          required />\\n\\n        <PasswordInput\\n          htmlId=\\\"registration-form-password\\\"\\n          name=\\\"password\\\"\\n          value={password}\\n          onChange={this.onChange}\\n          quality={this.passwordQuality(password)}\\n          showVisibilityToggle\\n          maxLength={50}\\n          error={errors.password} />\\n\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n      </div>\\n    )\\n  }\\n}\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"\",\"code\":\"import React, { Component } from \\\"react\\\";\\nimport RegistrationForm from \\\"ps-react/RegistrationForm\\\";\\n\\nclass ExampleRegistrationForm extends Component {\\n  onSubmit = user => {\\n    console.log(user);\\n  };\\n\\n  render() {\\n    return <RegistrationForm onSubmit={this.onSubmit} />;\\n  }\\n}\\n\\nexport default ExampleRegistrationForm;\\n\"}]},{\"name\":\"TextInput\",\"description\":\"\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"\\\"text\\\"\",\"computed\":false},{\"value\":\"\\\"number\\\"\",\"computed\":false},{\"value\":\"\\\"password\\\"\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\n\\nconst TextInput = ({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) => (\\n  <div style={{ marginBottom: 16 }}>\\n    <Label htmlFor={htmlId} label={label} required={required} />\\n    <input\\n      id={htmlId}\\n      type={type}\\n      name={name}\\n      placeholder={placeholder}\\n      value={value}\\n      onChange={onChange}\\n      style={error && { border: \\\"solid 1px red\\\" }}\\n      {...props}\\n    />\\n    {children}\\n    {error && (\\n      <div className=\\\"error\\\" style={{ color: \\\"red\\\" }}>\\n        {error}\\n      </div>\\n    )}\\n  </div>\\n);\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"\",\"code\":\"import TextInput from \\\"ps-react/TextInput\\\";\\nimport React from \\\"react\\\";\\n\\nconst ExampleOptional = () => {\\n  return (\\n    <TextInput\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      onChange={() => {}}\\n      error=\\\"First name is required.\\\"\\n    />\\n  );\\n};\\n\\nexport default ExampleOptional;\\n\"},{\"name\":\"ExampleOptional\",\"description\":\"\",\"code\":\"import TextInput from \\\"ps-react/TextInput\\\";\\nimport React from \\\"react\\\";\\n\\nconst ExampleOptional = () => {\\n  return (\\n    <TextInput\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      onChange={() => {}}\\n    />\\n  );\\n};\\n\\nexport default ExampleOptional;\\n\"}]},{\"name\":\"TextInputBEM\",\"description\":\"\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"\\\"text\\\"\",\"computed\":false},{\"value\":\"\\\"number\\\"\",\"computed\":false},{\"value\":\"\\\"password\\\"\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\n\\nconst TextInputBEM = ({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) => (\\n  <div className=\\\"textinput\\\">\\n    <Label htmlFor={htmlId} label={label} required={required} />\\n    <input\\n      id={htmlId}\\n      type={type}\\n      name={name}\\n      placeholder={placeholder}\\n      value={value}\\n      onChange={onChange}\\n      className={error && \\\"textinput__input--state-error\\\"}\\n      {...props}\\n    />\\n    {children}\\n    {error && <div className=\\\"textinput__error\\\">{error}</div>}\\n  </div>\\n);\\n\\nTextInputBEM.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputBEM;\\n\",\"examples\":[{\"name\":\"ExampleErrorBEM\",\"description\":\"\",\"code\":\"import TextInputBEM from \\\"ps-react/TextInputBEM\\\";\\nimport React from \\\"react\\\";\\n\\nconst ExampleErrorBEM = () => {\\n  return (\\n    <TextInputBEM\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      onChange={() => {}}\\n      error=\\\"First name is required.\\\"\\n    />\\n  );\\n};\\n\\nexport default ExampleErrorBEM;\\n\"}]},{\"name\":\"TextInputCSSModules\",\"description\":\"\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"\\\"text\\\"\",\"computed\":false},{\"value\":\"\\\"number\\\"\",\"computed\":false},{\"value\":\"\\\"password\\\"\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\nimport styles from \\\"./textInput.css\\\";\\n\\nconst TextInputCSSModules = ({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) => (\\n  <div className={styles.fieldset}>\\n    <Label htmlFor={htmlId} label={label} required={required} />\\n    <input\\n      id={htmlId}\\n      type={type}\\n      name={name}\\n      placeholder={placeholder}\\n      value={value}\\n      onChange={onChange}\\n      style={error && styles.inputError}\\n      {...props}\\n    />\\n    {children}\\n    {error && <div className={styles.error}>{error}</div>}\\n  </div>\\n);\\n\\nTextInputCSSModules.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputCSSModules;\\n\",\"examples\":[{\"name\":\"ExampleErrorCSSModules\",\"description\":\"\",\"code\":\"import TextInputCSSModules from \\\"ps-react/TextInputCSSModules\\\";\\nimport React from \\\"react\\\";\\n\\nconst ExampleErrorCSSModules = () => {\\n  return (\\n    <TextInputCSSModules\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      onChange={() => {}}\\n      error=\\\"First name is required.\\\"\\n    />\\n  );\\n};\\n\\nexport default ExampleErrorCSSModules;\\n\"}]},{\"name\":\"TextInputStyledComponents\",\"description\":\"\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"\\\"text\\\"\",\"computed\":false},{\"value\":\"\\\"number\\\"\",\"computed\":false},{\"value\":\"\\\"password\\\"\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\nimport styled from \\\"styled-components\\\";\\n\\nconst TextInputStyledComponents = ({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) => {\\n  const Error = styled.div`\\n    color: red;\\n  `;\\n\\n  const Input = styled.input`\\n    border: ${error && \\\"solid 1px red\\\"};\\n    display: block;\\n  `;\\n\\n  const Fieldset = styled.div`\\n    margin-bottom: 16px;\\n  `;\\n\\n  return (\\n    <Fieldset>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <Input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        {...props}\\n      />\\n      {children}\\n      {error && <Error>{error}</Error>}\\n    </Fieldset>\\n  );\\n};\\n\\nTextInputStyledComponents.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputStyledComponents;\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"\",\"code\":\"import React from \\\"react\\\";\\nimport TextInputStyledComponents from \\\"../../../components/TextInputStyledComponents\\\";\\n\\nconst ExampleError = () => {\\n  return (\\n    <TextInputStyledComponents\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      onChange={() => {}}\\n      error=\\\"First name is required.\\\"\\n    />\\n  );\\n};\\n\\nexport default ExampleError;\\n\"}]}]","import React from \"react\";\nimport EyeIcon from \"ps-react/EyeIcon\";\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n","import React from \"react\";\nimport Label from \"../../../components/Label\";\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />;\n}\n","import React from \"react\";\nimport Label from \"../../../components/Label\";\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />;\n}\n","import React, { Component } from \"react\";\nimport PasswordInput from \"ps-react/PasswordInput\";\n\nclass ExampleAllFeatures extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      password: \"\"\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExampleAllFeatures;\n","import React from \"react\";\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/** 100% progress */\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} height={20} />;\n}\n","import React from \"react\";\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/** 10% progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={150} />;\n}\n","import React from \"react\";\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/** 70% progress */\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={150} />;\n}\n","import TextInput from \"ps-react/TextInput\";\nimport React from \"react\";\n\nconst ExampleOptional = () => {\n  return (\n    <TextInput\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      onChange={() => {}}\n      error=\"First name is required.\"\n    />\n  );\n};\n\nexport default ExampleOptional;\n","import TextInput from \"ps-react/TextInput\";\nimport React from \"react\";\n\nconst ExampleOptional = () => {\n  return (\n    <TextInput\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      onChange={() => {}}\n    />\n  );\n};\n\nexport default ExampleOptional;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = (event) => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({user});\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  validate({email, password}) {\n    const errors = {};\n    const {minPasswordLength} = this.props;\n\n    if (!email) errors.email = 'Email required.';\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({errors});\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const {user} = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({submitted: true});\n    }\n  }\n\n  render() {\n    const {errors, submitted} = this.state;\n    const {email, password} = this.state.user;\n\n    return (\n      submitted ?\n      <h2>{this.props.confirmationMessage}</h2> :\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password} />\n\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;","import React, { Component } from \"react\";\nimport RegistrationForm from \"ps-react/RegistrationForm\";\n\nclass ExampleRegistrationForm extends Component {\n  onSubmit = user => {\n    console.log(user);\n  };\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />;\n  }\n}\n\nexport default ExampleRegistrationForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\nimport styles from \"./textInput.css\";\n\nconst TextInputCSSModules = ({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) => (\n  <div className={styles.fieldset}>\n    <Label htmlFor={htmlId} label={label} required={required} />\n    <input\n      id={htmlId}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      style={error && styles.inputError}\n      {...props}\n    />\n    {children}\n    {error && <div className={styles.error}>{error}</div>}\n  </div>\n);\n\nTextInputCSSModules.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputCSSModules;\n","import TextInputCSSModules from \"ps-react/TextInputCSSModules\";\nimport React from \"react\";\n\nconst ExampleErrorCSSModules = () => {\n  return (\n    <TextInputCSSModules\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      onChange={() => {}}\n      error=\"First name is required.\"\n    />\n  );\n};\n\nexport default ExampleErrorCSSModules;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\n\nconst TextInputBEM = ({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) => (\n  <div className=\"textinput\">\n    <Label htmlFor={htmlId} label={label} required={required} />\n    <input\n      id={htmlId}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      className={error && \"textinput__input--state-error\"}\n      {...props}\n    />\n    {children}\n    {error && <div className=\"textinput__error\">{error}</div>}\n  </div>\n);\n\nTextInputBEM.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputBEM;\n","import TextInputBEM from \"ps-react/TextInputBEM\";\nimport React from \"react\";\n\nconst ExampleErrorBEM = () => {\n  return (\n    <TextInputBEM\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      onChange={() => {}}\n      error=\"First name is required.\"\n    />\n  );\n};\n\nexport default ExampleErrorBEM;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\nimport styled from \"styled-components\";\n\nconst TextInputStyledComponents = ({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) => {\n  const Error = styled.div`\n    color: red;\n  `;\n\n  const Input = styled.input`\n    border: ${error && \"solid 1px red\"};\n    display: block;\n  `;\n\n  const Fieldset = styled.div`\n    margin-bottom: 16px;\n  `;\n\n  return (\n    <Fieldset>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        {...props}\n      />\n      {children}\n      {error && <Error>{error}</Error>}\n    </Fieldset>\n  );\n};\n\nTextInputStyledComponents.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputStyledComponents;\n","import React from \"react\";\nimport TextInputStyledComponents from \"../../../components/TextInputStyledComponents\";\n\nconst ExampleError = () => {\n  return (\n    <TextInputStyledComponents\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      onChange={() => {}}\n      error=\"First name is required.\"\n    />\n  );\n};\n\nexport default ExampleError;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/** A super lame component. */\nfunction HelloWorld({ message }) {\n  return <div>Hello {message}</div>;\n}\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n  message: \"World\"\n};\n\nexport default HelloWorld;\n","import React from \"react\";\nimport HelloWorld from \"ps-react/HelloWorld\";\n\n/** Custom message */\nexport default function ExampleHelloWorld() {\n  return <HelloWorld message=\"Hello\" />;\n}\n","var map = {\n\t\"./EyeIcon/Example\": 17,\n\t\"./EyeIcon/Example.js\": 17,\n\t\"./HelloWorld/ExampleHelloWorld\": 30,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 30,\n\t\"./Label/ExampleOptional\": 18,\n\t\"./Label/ExampleOptional.js\": 18,\n\t\"./Label/ExampleRequired\": 19,\n\t\"./Label/ExampleRequired.js\": 19,\n\t\"./PasswordInput/ExampleAllFeatures\": 20,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 20,\n\t\"./ProgressBar/Example100Percent\": 21,\n\t\"./ProgressBar/Example100Percent.js\": 21,\n\t\"./ProgressBar/Example10Percent\": 22,\n\t\"./ProgressBar/Example10Percent.js\": 22,\n\t\"./ProgressBar/Example70Percent\": 23,\n\t\"./ProgressBar/Example70Percent.js\": 23,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 26,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 26,\n\t\"./TextInput/ExampleError\": 24,\n\t\"./TextInput/ExampleError.js\": 24,\n\t\"./TextInput/ExampleOptional\": 25,\n\t\"./TextInput/ExampleOptional.js\": 25,\n\t\"./TextInputBEM/ExampleErrorBEM\": 28,\n\t\"./TextInputBEM/ExampleErrorBEM.js\": 28,\n\t\"./TextInputCSSModules/ExampleErrorCSSModules\": 27,\n\t\"./TextInputCSSModules/ExampleErrorCSSModules.js\": 27,\n\t\"./TextInputStyledComponents/ExampleError\": 29,\n\t\"./TextInputStyledComponents/ExampleError.js\": 29\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 39;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Navigation = ({ components }) => {\n  return (\n    <ul className=\"navigation\">\n      {components.map(name => {\n        return (\n          <li key={name}>\n            <a href={`#${name}`}>{name}</a>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport hljs from \"highlight.js/lib/highlight\";\nimport javascript from \"highlight.js/lib/languages/javascript\";\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage(\"javascript\", javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre\n        ref={ref => {\n          this.element = ref;\n        }}\n      >\n        <code>{this.props.children}</code>\n      </pre>\n    );\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n};\n\nexport default CodeExample;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CodeExample from \"./CodeExample\";\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n  }\n\n  toggleCode = event => {\n    event.preventDefault();\n    this.setState(prevState => {\n      return { showCode: !prevState.showCode };\n    });\n  };\n\n  render() {\n    const { showCode } = this.state;\n    const { code, description, name } = this.props.example;\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`)\n      .default;\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4>}\n\n        <ExampleComponent />\n\n        <p>\n          <a href=\"\" onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </a>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    );\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n};\n\nexport default Example;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Props = ({ props }) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(props).map(key => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>\n                {props[key].defaultValue && props[key].defaultValue.value}\n              </td>\n              <td>{props[key].required && \"X\"}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Example from \"./Example\";\nimport Props from \"./Props\";\n\nconst ComponentPage = ({ component }) => {\n  const { name, description, props, examples } = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {examples.length > 0\n        ? examples.map(example => (\n            <Example\n              key={example.code}\n              example={example}\n              componentName={name}\n            />\n          ))\n        : \"No examples exist.\"}\n\n      <h3>Props</h3>\n      {props ? <Props props={props} /> : \"This component accepts no props.\"}\n    </div>\n  );\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React from \"react\";\nimport Navigation from \"./Navigation\";\nimport ComponentPage from \"./ComponentPage\";\nimport componentData from \"../../config/componentData\";\n\nexport default class Docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: window.location.hash.substr(1)\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"hashchange\", () => {\n      this.setState({ route: window.location.hash.substr(1) });\n    });\n  }\n\n  render() {\n    const { route } = this.state;\n    const component = route\n      ? componentData.filter(component => component.name === route)[0]\n      : componentData[0];\n\n    return (\n      <div>\n        <Navigation\n          components={componentData.map(component => component.name)}\n        />\n        <ComponentPage component={component} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Docs from \"./docs/Docs\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/highlight.js/styles/ocean.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Docs />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}